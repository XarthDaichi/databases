drop table T06_BD001;
drop table T07_BD001;
drop table T04_BD001;
drop table T05_BD001;
drop table T03_BD001;
drop table T02_BD001;
drop table T08_BD001;
drop table T01_BD001;
drop table T09_BD001;
drop table T10_BD001;

create table T01_BD001 ( -- Vendedores
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    constraint T01PK PRIMARY KEY(codigo)
);

create table T08_BD001 ( -- Zonas
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    constraint T08PK PRIMARY KEY (codigo),
    constraint T08U unique (nombre)
);

create table T02_BD001 ( -- Clientes
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    vendedor int,
    zona int,
    constraint T02PK PRIMARY KEY(codigo),
    constraint T02FK01 FOREIGN KEY (vendedor) references T01_BD001(codigo),
    constraint T02FK08 FOREIGN KEY (zona) references T08_BD001(codigo)
);

create table T03_BD001 ( -- Facturas
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    fecha date,
    cliente int,
    monto_total float,
    constraint T03PK PRIMARY KEY(codigo),
    constraint T03FK FOREIGN KEY (cliente) references T02_BD001(codigo)
);

create table T05_BD001 ( -- Producto
    codigo varchar(30),
    precio float,
    costo float,
    utilidad float,
    constraint T05PK PRIMARY KEY(codigo)
);

create table T04_BD001 ( -- Lineas
    cantidad int,
    precio_venta float,
    producto varchar(30),
    factura int,
    constraint T04PK PRIMARY KEY(producto, factura),
    constraint T04FK05 FOREIGN KEY (producto) references T05_BD001(codigo),
    constraint TO4FK03 FOREIGN KEY (factura) references T03_BD001(codigo)
);

create table T07_BD001 ( -- Bodegas
    codigo int,
    nombre varchar(30),
    zona int,
    constraint T07PK PRIMARY KEY (codigo),
    constraint T07FK08 FOREIGN KEY (zona) references T08_BD001(codigo)
);

create table T06_BD001 ( -- Inventario
    cantidad int,
    minimo_permitido int,
    bodega int,
    producto varchar(30),
    reorder int,
    constraint T06PK PRIMARY KEY (bodega, producto),
    constraint T06FK07 FOREIGN KEY (bodega) references T07_BD001(codigo),
    constraint T06FK05 FOREIGN KEY (producto) references T05_BD001(codigo)
);

create table T09_BD001 ( -- Movimiento
    producto varchar(30),
    bodega int,
    cantidad int,
    tipo_mov int,
    fecha date
);

create table T10_BD001 ( -- Orden de Producion
    producto varchar(30), 
    reorder int,
    fecha_y_tiempo timestamp,
    usuario int
);

-- Catalogo de Procedimientos

-- Clientes:
--  nuevos clientes
--  modificar datos
--  eliminar clientes
-- Reportes:
--  Lista general clientes
--  Total de compras por cliente (General)

set serveroutput on size 30000;

create or replace procedure BD001_P001 (wnombre varchar, wvendedor int, wzona int) -- create cliente
IS
BEGIN
insert into T02_BD001 (nombre, vendedor, zona) values (wnombre, wvendedor, wzona);
commit;
END BD001_P001;
/

create or replace procedure BD001_P002 (wcodigo int, wnombre varchar, wzona int) -- update cliente
IS
BEGIN
update T02_BD001
set nombre = wnombre, zona = wzona
where codigo = wcodigo;
commit;
END BD001_P002;
/

create or replace procedure BD001_P003 (wcodigo int) -- delete cliente
IS
BEGIN
delete from T02_BD001 where codigo = wcodigo;
commit;
END BD001_P003;
/

create or replace procedure BD001_P004 -- lista general de clientes
IS
wcodigo int;
wnombre varchar(30);
BEGIN
for row in (select nombre, codigo from T02_BD001)
loop
DBMS_OUTPUT.PUT_LINE('Codigo: ' || row.codigo || ' Nombre: ' || row.nombre);
end loop;
END BD001_P004;
/

create or replace procedure BD001_P005 (wcodigo int) -- consulta de clientes y cobros
IS
    wnombre varchar(30);
    wprecio number;
    c1 SYS_REFCURSOR;
BEGIN
    OPEN c1 FOR
    select T02_BD001.nombre, SUM(T04_BD001.precio_venta * T04_BD001.cantidad)
    from T02_BD001, T03_BD001, T04_BD001 
    where wcodigo = T02_BD001.codigo and T02_BD001.codigo = T03_BD001.cliente and T03_BD001.codigo = T04_BD001.factura 
    group by T02_BD001.nombre;
    LOOP
        FETCH c1 into wnombre, wprecio;
        EXIT WHEN c1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || wnombre || ' Gasto: ' || wprecio);
    END LOOP;
    CLOSE c1;
END BD001_P005;
/

create or replace function F0038(wproducto varchar, wbodega int, wcantidad int, wtipo int)
RETURN int AS
    ok int := 0;
BEGIN
    IF wtipo = 1 THEN
        UPDATE T06_BD001
        SET cantidad = cantidad + wcantidad
        WHERE producto = wproducto AND bodega = wbodega;
    ELSE
        UPDATE T06_BD001
        SET cantidad = cantidad - wcantidad
        WHERE producto = wproducto AND bodega = wbodega;
    END IF;
    IF SQL%ROWCOUNT > 0 THEN
        ok := 1;
    END IF;
    RETURN ok;
END F0038;
/

create or replace procedure BD001_P006 -- Update inventario por completo
IS 
    wproducto T09_BD001.producto%TYPE;
    wbodega T09_BD001.bodega%TYPE;
    wcantidad T09_BD001.cantidad%TYPE;
    wtipo T09_BD001.tipo_mov%TYPE;
    wfecha T09_BD001.fecha%TYPE;
    c1 SYS_REFCURSOR;
    tm int := 0;
    tma int := 0;
BEGIN
    OPEN c1 FOR
    SELECT * FROM T09_BD001;
    LOOP
        FETCH c1 INTO wproducto, wbodega, wcantidad, wtipo, wfecha;
        EXIT WHEN c1%NOTFOUND;
        tm := tm + 1;
        tma := tma + F0038(wproducto, wbodega, wcantidad, wtipo);
    END LOOP;
    IF tm = tma THEN
        commit;
    ELSE
        rollback;
    END IF;
    CLOSE c1;    
END BD001_P006;
/

create or replace procedure BD001_P0037 (fecha1 Date, fecha2 Date) -- update inventory from date to date
IS
    wproducto T09_BD001.producto%TYPE;
    wbodega T09_BD001.bodega%TYPE;
    wcantidad T09_BD001.cantidad%TYPE;
    wtipo T09_BD001.tipo_mov%TYPE;
    wfecha T09_BD001.fecha%TYPE;
    c1 SYS_REFCURSOR;
    tm int := 0;
    tma int := 0;
BEGIN
    OPEN c1 FOR
    SELECT * FROM T09_BD001
    WHERE fecha >= fecha1 AND fecha <= fecha2;
    LOOP
        FETCH c1 INTO wproducto, wbodega, wcantidad, wtipo, wfecha;
        EXIT WHEN c1%NOTFOUND;
        tm := tm + 1;
        tma := tma + F0038(wproducto, wbodega, wcantidad, wtipo);
    END LOOP;
    IF tm = tma THEN
        commit;
    ELSE
        rollback;
    END IF;
    CLOSE c1;
END BD001_P0037;
/

create or replace procedure P0075(wproducto varchar, wreorder int) -- reordering product
IS
BEGIN
    insert into T10_BD001 (producto, reorder, fecha_y_tiempo, usuario) values (wproducto, wreorder, SYSTIMESTAMP, 1);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

create or replace trigger tr027 -- trigger when inventory updates
AFTER UPDATE on T06_BD001
FOR EACH ROW
BEGIN
    IF :NEW.cantidad <= :OLD.minimo_permitido THEN
        P0075(:NEW.producto, :NEW.reorder);
    END IF;
END;
/


insert into T01_BD001 (nombre) values ('Pepito');
insert into T01_BD001 (nombre) values ('Ana');
insert into T08_BD001 (nombre) values ('Heredia');
insert into T08_BD001 (nombre) values ('Alajuela');
select * from T01_BD001;
select * from T08_BD001;
exec BD001_P001 ('Diego', 1, 1);
exec BD001_P001 ('Jorge', 1, 2);
exec BD001_P001 ('Luis', 2, 2);
exec BD001_P004;
exec BD001_P002 (1, 'Felipe', 1);
exec BD001_P002 (2, 'Jorge', 1);
exec BD001_P004;
exec BD001_P003 (3);
exec BD001_P004;
-- exec BD001_P005 (1);


-- Para testeo de movimiento
insert into T08_BD001 (nombre) values ('Guapiles');

-- PRUEBAS DE INTEGRIDAD

-- 1. Relacional
insert into T05_BD001 (codigo, precio, costo, utilidad) values ('Pan', 100, 10, 90);
insert into T05_BD001 (codigo, precio, costo, utilidad) values ('Pan', 1, 1, 0);

-- 2. Referencial
select * from T02_BD001 t02 inner join T01_BD001 t01 on t02.vendedor = t01.codigo;
delete from T01_BD001 where codigo = 1;

-- 3. Dominio
insert into T07_BD001 (codigo, nombre, zona) values ('AL001', 'Alajuela001', 1);

-- 4. Funcional
insert into T07_BD001 (nombre, zona) values ('Alajuela001', 2);



-- 5. Testeos de Movimiento
insert into T05_BD001 (codigo, costo, utilidad, precio) values ('Arroz-001', 100, 10, 110);
insert into T07_BD001 (codigo, nombre, zona) values (1, 'AL001', 1);
insert into T07_BD001 (codigo, nombre, zona) values (2, 'HE001', 2);
insert into T07_BD001 (codigo, nombre, zona) values (3, 'AL002', 1);
insert into T07_BD001 (codigo, nombre, zona) values (4, 'GU001', 3);
insert into T06_BD001 (producto, bodega, cantidad, minimo_permitido, reorder) values ('Arroz-001', 1, 10, 5, 20);
insert into T06_BD001 (producto, bodega, cantidad, minimo_permitido, reorder) values ('Arroz-001', 2, 5, 5, 10);
insert into T06_BD001 (producto, bodega, cantidad, minimo_permitido, reorder) values ('Arroz-001', 3, 10, 0, 5);
insert into T09_BD001 (producto, bodega, cantidad, tipo_mov, fecha) values ('Arroz-001', 2, 3, 1, TO_DATE('2023-05-17', 'YYYY-MM-DD'));
insert into T09_BD001 (producto, bodega, cantidad, tipo_mov, fecha) values ('Arroz-001', 3, 10, 2, TO_DATE('2023-05-16', 'YYYY-MM-DD'));
insert into T09_BD001 (producto, bodega, cantidad, tipo_mov, fecha) values ('Arroz-001', 1, 2, 1, TO_DATE('2023-05-15', 'YYYY-MM-DD'));
insert into T09_BD001 (producto, bodega, cantidad, tipo_mov, fecha) values ('Arroz-001', 2, 1, 2, TO_DATE('2023-05-13', 'YYYY-MM-DD'));

select * from T06_BD001;

select * from T09_BD001;

execute BD001_P006;

select * from T06_BD001;

select * from T09_BD001;

select * from T10_BD001;

execute BD001_P0037(TO_DATE('2023-05-14', 'YYYY-MM-DD'), SYSDATE);

select * from T06_BD001;

select * from T09_BD001;

select * from T10_BD001;

select * from T02_BD001;

select * from T05_BD001;

insert into T03_BD001 (fecha, cliente, monto_total) values (SYSDATE, 1, 0);
insert into T03_BD001 (fecha, cliente, monto_total) values (SYSDATE, 2, 0);
insert into T04_BD001 (cantidad, precio_venta, producto, factura) values (3, 2000, 'Pan', 1);
insert into T04_BD001 (cantidad, precio_venta, producto, factura) values (3, 7000, 'Arroz-001', 1);
insert into T04_BD001 (cantidad, precio_venta, producto, factura) values (3, 2000, 'Pan', 2);
insert into T04_BD001 (cantidad, precio_venta, producto, factura) values (3, 2000, 'Arroz-001', 2);

select * from T03_BD001;

execute BD001_P005(1);
execute BD001_P005(2);



select familia.nombre, producto.codigo, producto.nombre, producto.precio
from familia, producto, componentes, formulas, materia_prima
where familia.id = producto.familia
and producto.codigo = componentes.producto
and componentes.codigo = formulas.componentes
and formulas.materia = materia_prima.codigo
and familia IP = wprecio
group by familia, producto