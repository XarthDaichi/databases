-- PARA PRUEBAS DROPPEAR TABLAS Y RECREAR
drop table movimientos;
drop table solicitud_compra;
drop table requisicion_materiales;
drop table orden_trabajo;
drop table orden_produccion;
drop table inventario_bodega;
drop table bodegas;
drop table componentes;
drop table materias_primas;
drop table lineas_factura;
drop table productos;
drop table familia_productos;
drop table facturas;
drop table clientes;
drop table tipo_clientes;
drop table zonas;
drop table vendedores;
drop table pagos;
drop table facturas_proveedores;
drop table formas_pagos;
drop table proveedores;
drop table tipos;

-- TABLAS
create table vendedores (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    total_vendido int,
    comision_anual int,
    constraint pkvendedor primary key (codigo)
);

create table zonas (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    total_clientes int,
    total_ventas int,
    constraint pkzonas primary key (codigo)
);

create table tipo_clientes (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    descuento int,
    limite_credito int,
    plazo_maximo int,
    constraint pktipo_cliente primary key (codigo)
);

create table clientes (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    total_compra int,
    tipo_cliente int,
    zona int,
    vendedor int,
    constraint pkcliente primary key (codigo),
    constraint fkcliente1 foreign key (vendedor) references vendedores(codigo),
    constraint fkcliente2 foreign key (tipo_cliente) references tipo_clientes(codigo),
    constraint fkcliente3 foreign key (zona) references zonas (codigo)
);

create table facturas (
    numero int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    fecha_creacion date,
    tipo_factura int,
    subtotal_factura int,
    total_impuesto int, 
    total_descuento int,
    total_factura int, 
    saldo_factura int,
    cliente int,
    estado int, -- 1. activa | 2. anulada | 3. cancelada
    constraint pkfactura primary key (numero),
    constraint fkfactura1 foreign key (cliente) references clientes(codigo)
);

create table familia_productos (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    descripcion varchar(30),
    constraint pkfamilia_productos primary key (codigo)
);

create table productos (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    precio_venta int,
    utilidad int,
    familia int, 
    constraint pkproducto primary key (codigo),
    constraint fkproducto foreign key (familia) references familia_productos (codigo)
);

create table lineas_factura(
    producto int,
    cantidad int,
    precio_linea int,
    factura int,
    constraint pklineas_facturas primary key (factura, producto),
    constraint fklineas_producto1 foreign key (producto) references productos (codigo),
    constraint fklineas_producto2 foreign key (factura) references facturas (numero)
);

create table materias_primas (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre varchar(30),
    cantidad_actual int,
    cantidad_minima int,
    cantidad_reorder int,
    ultimo_precio int,
    proveedor int,
    constraint pkmaterias_primas primary key (codigo)
);

create table componentes (
    producto int,
    materia_prima int,
    cantidad int,
    constraint pkcomponentes primary key (producto, materia_prima),
    constraint fkcomponentes1 foreign key (producto) references productos (codigo),
    constraint fkcomponentes2 foreign key (materia_prima) references materias_primas (codigo)
);

create table bodegas (
    codigo int GENERATED BY DEFAULT ON NULL AS IDENTITY, 
    zona int,
    constraint pkbodega primary key (codigo),
    constraint fkbodega foreign key (zona) references zonas (codigo)
);

create table inventario_bodega (
    bodega int,
    producto int,
    cantidad_actual int,
    cantidad_minima int,
    cantidad_reorder int,
    constraint pkinventario_bodega primary key (bodega, producto),
    constraint fkinventario_bodega1 foreign key (bodega) references bodegas (codigo),
    constraint fkinventario_bodega2 foreign key (producto) references productos (codigo)
);

create table orden_produccion (
    numero int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    producto int, 
    cantidad int,
    bodega int,
    fecha date,
    estado int, -- 1. pendiente | 2. rechazada | 3. cumplida
    constraint pkorden_produccion primary key (numero),
    constraint fkorden_produccion1 foreign key (producto) references productos (codigo),
    constraint fkorden_produccion2 foreign key (bodega) references bodegas (codigo)
);

create table orden_trabajo (
    numero int GENERATED BY DEFAULT ON NULL AS IDENTITY,
    orden_produccion int,
    fecha date,
    estado int, -- 1. pendiente | 2. rechazada | 3. cumplida
    constraint pkorden_trabajo primary key (numero),
    constraint fkorden_trabajo foreign key (orden_produccion) references orden_produccion (numero)
);

create table requisicion_materiales (
    orden_trabajo int,
    materia int,
    cantidad int,
    estado int, -- 1. pendiente | 2. rechazada | 3. cumplida
    constraint pkrequsicion primary key (orden_trabajo, materia),
    constraint fkrequisicion_materiales1 foreign key (orden_trabajo) references orden_trabajo (numero),
    constraint fkrequisicion_materiales2 foreign key (materia) references materias_primas (codigo)
);

create table tipos(
    tipo int, 
    nombre_tipo varchar(10),
    constraint tipoPK PRIMARY KEY(tipo)
);

create table proveedores(
    codigo int,
    nombre varchar(10),
    tipo int,
    limite_credito int,
    total_comprado int,
    constraint proveedorPK PRIMARY KEY (codigo),
    constraint proveedor_TFK FOREIGN KEY (tipo) references tipos(tipo)
);

create table formas_pagos(
    forma_pago int,
    nombre_forma_pago varchar(10),
    constraint forma_pagoPK PRIMARY KEY(forma_pago)
);

create table facturas_proveedores(
    factura int,
    proveedor int,
    fecha_original date,
    monto int,
    saldo int,
    forma_pago int,
    constraint facturaPK PRIMARY KEY (factura),
    constraint factura_FPFK FOREIGN KEY (forma_pago) references formas_pagos(forma_pago),
    constraint factura_PRFK FOREIGN KEY (proveedor) references proveedores(codigo)
);

create table pagos(
    fecha date,
    monto int,
    factura int,
    constraint pago_facFK FOREIGN KEY (factura) references facturas_proveedores(factura)
);

create table solicitud_compra (
    proveedor int, 
    materia int, 
    cantidad int, 
    fecha date, 
    estado int,
    constraint fksolicitud_compra1 foreign key (materia) references materias_primas (codigo),
    constraint fksolicitud_compra2 foreign key (proveedor) references proveedores (codigo)
);

create table movimientos (
    producto int,
    bodega int,
    cantidad int,
    tipo_mov int,
    fecha date
);

-- OBJETO BODEGUERO

create or replace type bodeguero as object (
    nombre VARCHAR(30),
    member function actualizar_requisicion (worden_trabajo int, wmateria int) return INTEGER,
    member function actualizar_requisiciones return INTEGER
);
/

create or replace type body bodeguero as
    member function actualizar_requisicion (worden_trabajo int, wmateria int) return INTEGER IS

    cantidad_requisicion requisicion_materiales.cantidad%TYPE;


    wcantidad_actual materias_primas.cantidad_actual%TYPE;
    wcantidad_minima materias_primas.cantidad_minima%TYPE;
    BEGIN
        SELECT cantidad_actual, cantidad_minima into wcantidad_actual, wcantidad_minima from materias_primas where codigo = wmateria;
        IF wcantidad_actual >= wcantidad_minima THEN
            select cantidad into cantidad_requisicion from requisicion_materiales where orden_trabajo = worden_trabajo and materia = wmateria;
            update materias_primas
            set cantidad_actual = cantidad_actual - cantidad_requisicion
            where codigo = wmateria;
            update requisicion_materiales
            set estado = 3
            where orden_trabajo = worden_trabajo and materia = wmateria;
        ELSE
            update requisicion_materiales
            set estado = 2
            where orden_trabajo = worden_trabajo and materia = wmateria;
        END IF;

        RETURN 1;
        EXCEPTION
            WHEN OTHERS THEN
                RETURN 0;
    END;

    member function actualizar_requisiciones return INTEGER is
        worden_trabajo requisicion_materiales.orden_trabajo%TYPE;
        wmateria requisicion_materiales.materia%TYPE;

        westado requisicion_materiales.estado%TYPE;
        worden_trabajo1 requisicion_materiales.orden_trabajo%TYPE;

        worden_produccion orden_trabajo.orden_produccion%TYPE;

        wcantidad orden_produccion.cantidad%TYPE;
        wproducto orden_produccion.producto%TYPE;
        wbodega orden_produccion.bodega%TYPE;

        CURSOR cur IS
            SELECT orden_trabajo, materia
            FROM requisicion_materiales;

        CURSOR cur1 IS 
            SELECT orden_trabajo, estado
            FROM requisicion_materiales;

        result INTEGER;
        amount_green int;
        row_count NUMBER;
    BEGIN
        open cur;

        LOOP
            FETCH cur into worden_trabajo, wmateria;

            EXIT WHEN cur%NOTFOUND;

            result := actualizar_requisicion(worden_trabajo, wmateria);
            IF result = 0 THEN
                DBMS_OUTPUT.PUT_LINE('Fallo al hacer una requisicion');
            ELSE
                SELECT COUNT(*) INTO row_count FROM requisicion_materiales where orden_trabajo = worden_trabajo;
                amount_green := 0;
                open cur1;
                LOOP
                    FETCH cur1 into worden_trabajo1, westado;
                    IF cur1%NOTFOUND THEN
                        IF amount_green = row_count THEN
                            update orden_trabajo set estado = 3 where numero = worden_trabajo;
                            select orden_produccion into worden_produccion from orden_trabajo where numero = worden_trabajo;
                            update orden_produccion set estado = 3 where numero = worden_produccion;
                            select cantidad, producto, bodega into wcantidad, wproducto, wbodega from orden_produccion where numero = worden_produccion;
                            update inventario_bodega set cantidad_actual = cantidad_actual + wcantidad where producto = wproducto and bodega = wbodega;
                        END IF;
                        EXIT;
                    END IF;
                    IF worden_trabajo = worden_trabajo1 THEN
                        IF westado = 3 THEN
                            amount_green := amount_green + 1;
                        ELSIF westado = 2 THEN
                            update orden_trabajo set estado = 2 where numero = worden_trabajo;
                            select orden_produccion into worden_produccion from orden_trabajo where numero = worden_trabajo;
                            update orden_produccion set estado = 2 where numero = worden_produccion;
                            EXIT; 
                        END IF;
                    END IF;
                END LOOP;

                CLOSE cur1;
            END IF;
        END LOOP;

        CLOSE cur;

        RETURN 1;

        EXCEPTION
            WHEN OTHERS THEN
                RETURN 0;
    end;
end;
/

-- UNA FUNCION PARA LA CREACION DE TRIGGERS

create or replace function temp_triggers (wproducto int, wcantidad int, worden_produccion int) return INTEGER
IS
    wmateria_componentes componentes.materia_prima%TYPE;
    wcantidad_componentes componentes.cantidad%TYPE;
    row_count int;
    CURSOR cur_triggers IS
        SELECT materia_prima, cantidad
        FROM componentes
        WHERE producto = wproducto;
BEGIN
    insert into orden_trabajo (orden_produccion,fecha,estado) values (worden_produccion, sysdate, 1);
    select COUNT(*) into row_count from orden_trabajo;
    open cur_triggers;
    LOOP
        FETCH cur_triggers into wmateria_componentes, wcantidad_componentes;

        EXIT WHEN cur_triggers%NOTFOUND;
        insert into requisicion_materiales (orden_trabajo, materia, cantidad, estado) values (row_count, wmateria_componentes, wcantidad_componentes * wcantidad, 1);
    END LOOP;
    close cur_triggers;
    RETURN 1;

    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
END;
/

-- TRIGGERS

create or replace trigger tr001
after update on inventario_bodega
for each row
BEGIN
    if :NEW.cantidad_actual < :OLD.cantidad_minima THEN
        insert into orden_produccion (producto, cantidad, bodega, fecha, estado)
            values (:OLD.producto, :OLD.cantidad_reorder, :NEW.bodega, sysdate, 1);
    end if;
end;
/

create or replace trigger tr002
after insert on orden_produccion
for each row
declare
    result integer;
BEGIN
    result := temp_triggers (:NEW.producto, :NEW.cantidad, :NEW.numero);
    DBMS_OUTPUT.PUT_LINE('RESULT = ' || result);
END;
/

create or replace trigger tr003
after update on materias_primas
for each row
BEGIN
    if :NEW.cantidad_actual < :OLD.cantidad_minima THEN
        insert into solicitud_compra (proveedor, materia, cantidad, fecha, estado)
            values (:OLD.proveedor, :OLD.codigo, :OLD.cantidad_reorder, sysdate, 1);
    end if;
end;
/

-- PROCEDIMIENTOS

create or replace procedure sp001 (wcodigo int, wnombre varchar)
IS
BEGIN
    insert into vendedores (codigo, nombre, total_vendido, comision_anual)
    values (wcodigo, wnombre, 0.00, 0.00);
    commit;
END sp001;
/

create or replace procedure sp002 (wcodigo int, wnombre varchar)
IS
BEGIN
    update vendedores set nombre = wnombre where codigo = wcodigo;
    commit;
END sp002;
/

create or replace procedure sp003 (wcodigo int)
IS
BEGIN
    delete from vendedores where codigo = wcodigo;
    commit;
END sp003;
/

create or replace procedure sp004 (wcodigo int, wcomision int)
IS
BEGIN
    update vendedores set comision_anual = wcomision where codigo = wcodigo;
END sp004;
/

create or replace procedure sp005 (c1 OUT SYS_REFCURSOR)
IS
BEGIN
    open c1 for 
    select codigo, nombre from vendedores order by nombre;
END sp005;
/

create or replace procedure sp006 (comisiones OUT SYS_REFCURSOR)
IS
BEGIN
    open comisiones for
    select vendedores.codigo, sum(vendedores.comision_anual * facturas.total_factura) as comision_anual
    from vendedores, clientes, facturas
    where vendedores.codigo = clientes.vendedor and clientes.codigo = facturas.cliente
    group by vendedores.codigo;
END sp006;
/

create or replace procedure sp007 (wvendedor int, c2 OUT SYS_REFCURSOR)
IS
BEGIN
    open c2 for
    select clientes.codigo, clientes.nombre
    from vendedores, clientes
    where vendedores.codigo = clientes.vendedor and vendedores.codigo = wvendedor;
END sp007;
/

create or replace procedure sp008 (wzona int, c3 out SYS_REFCURSOR)
IS
BEGIN
    open c3 for
    select clientes.codigo, clientes.nombre, zonas.nombre
    from vendedores, clientes, zonas
    where vendedores.codigo = clientes.vendedor
        and clientes.zona = zonas.codigo
        and zonas.codigo = wzona;
END sp008;
/

create or replace procedure sp009 (c4 out SYS_REFCURSOR)
IS
BEGIN
    open c4 for
    select clientes.codigo, clientes.nombre, clientes.total_compra
    from vendedores, clientes
    where vendedores.codigo = clientes.vendedor
    order by clientes.total_compra;
END sp009;
/

create or replace procedure sp010 (c5 out SYS_REFCURSOR)
IS
BEGIN
    open c5 for
    select productos.nombre, SUM(lineas_factura.cantidad) as total_cantidad
    from vendedores, clientes, facturas, lineas_factura, productos
    where vendedores.codigo = clientes.vendedor
        and clientes.codigo = facturas.cliente
        and facturas.numero = lineas_factura.factura
        and lineas_factura.producto = productos.codigo
    group by (productos.nombre)
    order by (total_cantidad) DESC;
END sp010;
/

create or replace procedure sp011 (c6 out SYS_REFCURSOR)
IS
BEGIN
    open c6 for
    select clientes.codigo, clientes.nombre
    from vendedores, clientes
    where vendedores.codigo = clientes.vendedor
        and (SELECT COUNT (*)
            from facturas
            where facturas.cliente = clientes.codigo
                and EXTRACT(MONTH FROM facturas.fecha_creacion) <= 3) = 0;
END sp011;
/

create or replace procedure sp012 (wfamilia int, c7 out SYS_REFCURSOR)
IS
BEGIN
    open c7 for
    select productos.nombre, SUM(lineas_factura.cantidad) as total
    from vendedores, clientes, facturas, lineas_factura, productos
    where vendedores.codigo = clientes.vendedor
        and clientes.codigo = facturas.cliente
        and facturas.numero = lineas_factura.factura
        and lineas_factura.producto = productos.codigo
        and productos.familia = wfamilia
    group by (productos.nombre)
    order by (total) DESC;
END sp012;
/

create or replace procedure sp013
IS
    cursor_mov SYS_REFCURSOR;   
    wproducto movimientos.producto%TYPE;
    wbodega movimientos.bodega%TYPE;
    wcantidad movimientos.cantidad%TYPE;
    wtipo_mov movimientos.tipo_mov%TYPE;
BEGIN
    open cursor_mov for
    select producto, bodega, cantidad, tipo_mov
    from movimientos;
    LOOP 
        FETCH cursor_mov into wproducto, wbodega, wcantidad, wtipo_mov;

        EXIT WHEN cursor_mov%NOTFOUND;
        IF wtipo_mov = 1 OR wtipo_mov = 4 THEN
            update inventario_bodega set cantidad_actual = cantidad_actual - wcantidad
            WHERE producto = wproducto and bodega = wbodega;
        ELSE
            update inventario_bodega set cantidad_actual = cantidad_actual + wcantidad
            WHERE producto = wproducto and bodega = wbodega;
        END IF;
    END LOOP;
END sp013;
/

-- PRUEBAS
set serveroutput on size 30000;
insert into familia_productos (descripcion) values ('test1');
insert into familia_productos (descripcion) values ('test2');
insert into productos (nombre, precio_venta,utilidad,familia) values ('Pan', 1000, 70, 1);
insert into productos (nombre, precio_venta,utilidad,familia) values ('Arroz', 2000, 60, 1);
insert into productos (nombre, precio_venta,utilidad,familia) values ('Cafe', 3000, 50, 2);
insert into materias_primas (nombre,cantidad_actual,cantidad_minima,cantidad_reorder,ultimo_precio,proveedor) values ('Harina', 30, 5, 50, 300, 1);
insert into materias_primas (nombre,cantidad_actual,cantidad_minima,cantidad_reorder,ultimo_precio,proveedor) values ('Huevos', 30, 5, 50, 300, 1);
insert into materias_primas (nombre,cantidad_actual,cantidad_minima,cantidad_reorder,ultimo_precio,proveedor) values ('Cafeina', 300, 10, 30, 400, 2);
insert into componentes (producto, materia_prima, cantidad) values (1, 1, 2);
insert into componentes (producto, materia_prima, cantidad) values (1, 2, 2);
insert into componentes (producto, materia_prima, cantidad) values (3, 3, 5);
insert into zonas (nombre,total_clientes,total_ventas) values ('Guapiles', 0, 0);
insert into zonas (nombre,total_clientes,total_ventas) values ('Escazu', 0, 0);
insert into bodegas (zona) values (1);
insert into bodegas (zona) values (1);
insert into inventario_bodega (bodega,producto,cantidad_actual,cantidad_minima,cantidad_reorder) values (1, 1, 500, 100, 10);
insert into inventario_bodega (bodega,producto,cantidad_actual,cantidad_minima,cantidad_reorder) values (2, 3, 600, 50, 50);

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp005(c1 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;

    close cur;
END;
/

exec sp001 (1, 'Diego');
exec sp001 (3, 'Jorge');
exec sp001 (4, 'Jovillo');

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp005(c1 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;

    close cur;
END;
/

exec sp002 (1, 'Felipe');

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp005(c1 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;

    close cur;
END;
/

exec sp002 (1, 'Diego');

exec sp003 (4);

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp005(c1 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;

    close cur;
END;
/

exec sp004 (1, 500000);

exec sp004 (3, 3);

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
    comision_anual int;
BEGIN
    sp005(c1 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;

    close cur;
END;
/

insert into tipo_clientes (descuento, limite_credito, plazo_maximo)
values (15, 1000000, 30);

insert into clientes (nombre, total_compra, tipo_cliente, zona, vendedor)
values ('Luis', 12000, 1, 1, 3);

insert into facturas (fecha_creacion, tipo_factura, subtotal_factura, total_impuesto, total_descuento, total_factura, saldo_factura, cliente, estado)
values (sysdate, 1, 6000, 0, 0, 6000, 0, 1 , 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (1, 1, 1000, 1);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (2, 1, 2000, 1);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (3, 1, 3000, 1);

insert into clientes (nombre, total_compra, tipo_cliente, zona, vendedor)
values ('Jovillo', 15000, 1, 2, 1);

insert into facturas (fecha_creacion, tipo_factura, subtotal_factura, total_impuesto, total_descuento, total_factura, saldo_factura, cliente, estado)
values (sysdate, 1, 6000, 0, 0, 6000, 0, 1 , 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (1, 1, 1000, 2);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (2, 1, 2000, 2);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (3, 1, 3000, 2);

insert into facturas (fecha_creacion, tipo_factura, subtotal_factura, total_impuesto, total_descuento, total_factura, saldo_factura, cliente, estado)
values (sysdate, 1, 6000, 0, 0, 6000, 0, 2 , 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (1, 1, 1000, 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (2, 1, 2000, 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (3, 1, 3000, 3);

insert into facturas (fecha_creacion, tipo_factura, subtotal_factura, total_impuesto, total_descuento, total_factura, saldo_factura, cliente, estado)
values (TO_DATE('2023-03-31', 'YYYY-MM-DD'), 1, 9000, 0, 0, 9000, 0, 2 , 3);

insert into lineas_factura (producto, cantidad, precio_linea, factura)
values (3, 3, 3000, 4);

declare
    cur SYS_REFCURSOR;
    codigo int;
    comision_anual NUMBER;
BEGIN
    sp006(comisiones => cur);

    LOOP
        FETCH cur into codigo, comision_anual;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Comision Anual: ' || comision_anual);
    END LOOP;
    
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp007(1, c2 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp007(3, c2 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
    zona varchar(30);
BEGIN
    sp008(1, c3 => cur);

    LOOP
        FETCH cur into codigo, nombre, zona;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo Cli: ' || codigo || ' Nombre: ' || nombre || ' Zona: ' || zona);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
    total_compra int;
BEGIN
    sp009(c4 => cur);

    LOOP
        FETCH cur into codigo, nombre, total_compra;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre || ' Total Compra: ' || total_compra);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    producto varchar(30);
    cantidad int;
BEGIN
    sp010(c5 => cur);

    LOOP
        FETCH cur into producto, cantidad;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Producto: ' || producto || ' Cantidad: ' || cantidad);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    codigo int;
    nombre varchar(30);
BEGIN
    sp011(c6 => cur);

    LOOP
        FETCH cur into codigo, nombre;

        EXIT WHEN cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('LO LOGREEE');
        DBMS_OUTPUT.PUT_LINE('Codigo: ' || codigo || ' Nombre: ' || nombre);
    END LOOP;
    close cur;
END;
/

declare
    cur SYS_REFCURSOR;
    producto varchar(30);
    total int;
BEGIN
    sp012(2, c7 => cur);

    LOOP
        FETCH cur into producto, total;

        EXIT WHEN cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Producto: ' || producto || ' TOTAL: ' || total);
    END LOOP;
    close cur;
END;
/

select producto, bodega, cantidad_actual from inventario_bodega;

select * from movimientos;

insert into movimientos (producto, bodega, cantidad, tipo_mov, fecha)
values (1, 1, 410, 1, sysdate);

insert into movimientos (producto, bodega, cantidad, tipo_mov, fecha)
values (3, 2, 575, 1, sysdate);

select * from movimientos;

exec sp013;

select producto, bodega, cantidad_actual from inventario_bodega;


select * from orden_produccion;
select * from orden_trabajo;
select * from requisicion_materiales;
select * from materias_primas;

declare
    juan bodeguero;
BEGIN
    juan := bodeguero('Juan');
    dbms_output.put_line('result = ' || juan.actualizar_requisiciones);
END;
/

select * from materias_primas;
select * from requisicion_materiales;
select * from orden_trabajo;
select * from orden_produccion;

select producto, bodega, cantidad_actual from inventario_bodega;